#include<deque.h>
#include<node2.h>
using std::cout;
using std::endl;

namespace deque
{
	static const size_t defaultContentSize = 10;
}

template <typename T>
deque<T>::deque()
{
	first = NULL;
	last = NULL;
	count = 0;
}

template <typename T>
deque<T>::~deque()
{
	if (isEmpty())
	{
		cout << " Underflow\n" << endl;
		return;
	}

	// Deque has only one element
	if (first == last)
	{
		first = -1;
		last = -1;
	}
	else if (last == 0)
		last = count- 1;
	else {
		last = last - 1;

	}
}


template <typename T>
deque<T>::deque(const deque<T>& dq)
	// copy constructor      
{
	content_ = new T[count];
	if (count=0)
	{
		std::cerr << "** Deque error: unable to allocate memory in copy constructor\n";
		exit(EXIT_FAILURE);
	}
	for (size_t i = 0; i < count; ++i) {
		size()[i] = dq.size()[i];
	}
}

template <typename T>
deque<T> &deque<T>::operator = (const deque<T>& dq)
// assignment operator
{
	if (this != &dq)
	{
		T* newContent = new T[dq.count];
		if (newContent == 0)
		{
			std::cerr << "** Deque error: unable to allocate memory in assignment operator\n" << endl;
			return *this;  // unchanged
		}
		delete[] arr;
		count = dq.count;
		first = dq.first;
		last = dq.last;
		for (size_t i = 0; i < count; ++i) {
			arr[i] = dq.arr[i];
		}
	}
	return *this;
}

template <typename T>
deque<T>::front() const
{
	// check whether Deque is empty or not
	if (empty())
	{
		cout << " Underflow\n" << endl;
		return -1;
	}
	return arr[first];
}

T&  deque<T>::front() 
{
	if (first == last)
	{
		std::cerr << "** Deque error: Front() called on empty deque\n";
		if (count == 0)
			exit(EXIT_FAILURE);
	}
	return arr[*first];
}

template <typename T>
T& deque<T>::back() const
{
	if (first== last)
	{
		std::cerr << "** Deque error: Back() called on empty deque\n";
		if (count == 0)
			exit(EXIT_FAILURE);
	}
	if (last == 0)
		return content_[count - 1];
	return content_[last -1];
}

T&  deque<T>::back() 
{
	if (first == last)
	{
		std::cerr << "** Deque error: Back() called on empty deque\n";
		if (count == 0)
			exit(EXIT_FAILURE);
	}
	if (last == 0)
		return content_[count - 1];
	return content_[last- 1];
}

template <typename T>
void deque<T>::pop_front()
{
	if (first==last)
		return 0;
	++first;
	if (first== count)
		first= 0;
	
}

template <typename T>
void deque<T>::pop_back()
{
	if (first== last)
		return 0;
	if (last == 0)
		last = count;
	--last;
	
}

template <typename T>
void deque<T>::push_back(const T& entry)
{
	// Create a new node
	node* tmp = new node();
	tmp->data = element;
	tmp->next = NULL;
	tmp->prev = NULL;

	if (isEmpty()) {
		// Add the first element
		front = rear = tmp;
		count++;
	}
	else {
		// Append to the list and fix links
		last->next = tmp;
		tmp->prev = last;
		last = tmp;
		count++;
	}

	
}

template <typename T>
void deque<T>::push_front(const T& entry)
{
	// Create a new node
	node* tmp = new node();
	tmp->data = element;
	tmp->next = NULL;
	tmp->prev = NULL;

	if (isEmpty()) {
		// Add the first element
		first = last = tmp;
		count++;
	}
	else {
		// Prepend to the list and fix links
		tmp->next = first;
		first->prev = tmp;
		first = tmp;
		count++;
	}

	
}

template <typename T>
size_t deque<T>::size() const
{
	if (first<= last)
		return last -first;
	return count + last - first;
}

template <typename T>
bool deque<T>::empty() const
{
	return first==last;
}

template <typename T>
std::ostream& operator << (std::ostream& out,const deque<U>& dq)
{
	dq.Display(os);
	return os;
}

template <typename U>
bool operator == (const deque<U>& dq1,const deque<U>& dq2)
{
	if (dq1.size() != dq2.size())
		return 0;
	for (size_t i = 0; i <dq1.size(); ++i)
		if (dq1[i] != dq2[i])
			return 0;
	return 1;
}