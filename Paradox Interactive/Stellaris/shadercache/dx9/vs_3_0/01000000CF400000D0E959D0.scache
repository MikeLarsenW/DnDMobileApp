#define VERTEX_SHADER
#define SHADERQUALITY_MEDIUM
#define PDX_DIRECTX_9

#define mod( X, Y ) ( X % Y )

#define GetMatrixData( Matrix, row, col ) ( Matrix [ row ] [ col ] )
#define FIX_FLIPPED_UV( X ) ( X )

#define sampler2DShadow sampler2D

float3x3 CastTo3x3( in float4x4 M )
{
	return (float3x3)M;
}
#define Create3x3 float3x3

float2 vec2(float vValue) { return float2(vValue, vValue); }
float3 vec3(float vValue) { return float3(vValue, vValue, vValue); }
float4 vec4(float vValue) { return float4(vValue, vValue, vValue, vValue); }

#define tex2Dlod0(samp,uv) tex2Dlod(samp, float4((uv), 0.0, 0.0))

#define PDX_POSITION POSITION

#define PDX_COLOR COLOR
float2 InvWindowSize : register(c32);

struct VS_INPUT
{
	int2 position : POSITION;
};
struct VS_OUTPUT
{
	float4 position : PDX_POSITION;
	float2 uv : TEXCOORD0;
};
		VS_OUTPUT main( const VS_INPUT VertexIn )
		{
			VS_OUTPUT VertexOut;
			VertexOut.position = float4( VertexIn.position, 0.0f, 1.0f );
			VertexOut.uv = float2(VertexIn.position.x, FIX_FLIPPED_UV(VertexIn.position.y)) * 0.5 + 0.5;
			VertexOut.uv.y = 1.0f - VertexOut.uv.y;
		
		#ifdef PDX_DIRECTX_9 // Half pixel offset
			VertexOut.position.xy += float2( -InvWindowSize.x, InvWindowSize.y );
		#endif
		
			return VertexOut;
		}
	