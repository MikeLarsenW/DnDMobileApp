
Implementation file:

#include <iostream>
#include <cassert> // Provides assert function
#include "sequence1.h" // With value_type defined as double
using namespace std;

namespace main_savitch_3
{

	// MOD MEMBER FUNCTIONS
	// constructor for sequence
	sequence::sequence()
	{
		current_index = 0;
		used = 0;
	}

	//sets the value of the array to 0
	void sequence::start()
	{
		current_index = 0;
	}


	//increases the number of items by one
	void sequence::advance()
	{
		current_index++;
	}

	//inserts an entry for the array
	void sequence::insert(const value_type& entry)
	{
		int i;

		for (i = used; i < current_index; i--)
		{
			data[i] = data[i - 1];
			data[current_index] = entry;
			used++;
		}
	}
	//attaches a value to a given spot
	void sequence::attach(const value_type& entry)
	{
		int i;

		for (i = used; i < current_index; i--)
		{
			data[i] = data[i + 1];
			data[current_index] = entry;
			used++;
		}
	}
	//removes an item
	void sequence::remove_current()
	{
		int i;


		for (i = current_index + 1; i < used - 1; i++)
		{
			data[i] = data[i + 1];
			used--;
		}
	}


	// CONSTANT MEMBER FUNCTIONS
	sequence::size_type sequence::size() const
	{
		return used;
	}
	//returns if there is an item
	bool sequence::is_item() const
	{
		return current_index < used;
	}
	//returns the last value of items
	sequence::value_type sequence::current() const
	{
		return data[current_index];
	}
}

Header File:

#ifndef MAIN_SAVITCH_SEQUENCE_H
#define MAIN_SAVITCH_SEQUENCE_H
#include <cstdlib>  // Provides size_t

namespace main_savitch_3
{
    class sequence
    {
    public:
        // TYPEDEFS and MEMBER CONSTANTS
        typedef double value_type;
        typedef std::size_t size_type;
        static const size_type CAPACITY = 30;
        // CONSTRUCTOR
        sequence( );
        // MODIFICATION MEMBER FUNCTIONS
        void start( );
        void advance( );
        void insert(const value_type& entry);
        void attach(const value_type& entry);
        void remove_current( );
        // CONSTANT MEMBER FUNCTIONS
        size_type size( ) const;
        bool is_item( ) const;
        value_type current( ) const;
    private:
        value_type data[CAPACITY];
        size_type used;
        size_type current_index;
    };
}

#endif

